// implementation using linkedlist
#define ma_x    100
#include <iostream>
using namespace std;
class queue{
private:
    struct Node{
        long data;
        Node* next;
    };
    Node* front = NULL;
    Node* rear = NULL;
    Node* newnode;
    int size = 0;
public:
    bool is_empty(){
        return (front == NULL && rear == NULL);
    }
    void push (int element) {
        if (size < ma_x) {
            newnode = new Node;
            newnode->data = element;
            newnode->next = NULL;
            if (front == NULL) {
                front = rear = newnode;
                size++;
            } else {
                rear->next = newnode;
                rear = newnode;
                size++;
            }
        }else {
            cout << "Overload! \n";
        }
    }
    void pop (){
        if(is_empty())
            cout<<"Queue is empty cannot pop anything\n";
        else
        if(front == rear)
        {
            delete front;
            --size;
            front = rear = NULL;
        }
        else
        {
            newnode = front;
            front = front->next;
            delete newnode;
            --size;
        }
    }
    bool is_exist (int element){
        Node *temp = front;
        while(temp != NULL)
        {
            if (temp->data == element)
            {
                return true;
            }
            temp = temp->next;
        }
    }
    void clear(){
        if (is_empty()){
            return;
        }else{
            Node *current = front;
            Node *temp = NULL;
            while(current != NULL){
                temp = current->next;
                delete current;
                current = temp;
            }
            front = rear = NULL;
            size = 0;
        }
    }
    void display()
    {
        if (is_empty())
            cout<<"Queue is empty cannot display anything\n";
        else
        {
            Node *temp = front;
            while(temp != NULL)
            {
                cout<< temp->data <<" ";
                temp = temp->next;
            }
        }
        cout << endl;
    }
};
int main(){
    queue q;
    q.push(1);
    q.push(2);
    q.push(3);
    q.display();
    cout << q.is_exist(1) << endl;
    q.pop();
    q.display();
    cout << q.is_exist(1) << endl;
    q.clear();
    q.display();
    return 0;
}
